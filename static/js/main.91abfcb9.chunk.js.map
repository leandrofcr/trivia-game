{"version":3,"sources":["services/API.js","action/index.js","components/LoginForms.jsx","pages/Login.jsx","components/Header.jsx","components/Timer.jsx","pages/TriviaGame.jsx","pages/Settings.jsx","pages/FeedBack.jsx","pages/Ranking.jsx","reducers/player.js","reducers/index.js","store/index.js","serviceWorker.js","index.js","App.js"],"names":["fetchToken","a","async","fetch","response","json","token","fetchQuestions","numQuestions","questions","getQuetions","payload","type","Login","state","name","gravatarEmail","btnEnable","login","errors","verifyLogin","bind","nameInfo","emailInfo","savePlayerInfo","this","props","localStorage","getItem","setItem","JSON","stringify","length","setState","test","errorEmail","htmlFor","data-testid","id","value","onChange","target","getTokenData","isQuestions","to","disabled","onClick","redirectToGame","Component","connect","player","dispatch","playerData","score","assertions","redirectSettings","showComp","className","items","from","x","opacity","enter","leave","delay","config","molasses","styles","item","div","style","LoginForms","Header","avatar","hash","md5","toString","src","alt","url","Timer","seconds","starTimer","stopTimer","timerInterval","setInterval","prevState","clearInterval","disableButtons","updateSeconds","wasAnswered","difficultyScore","hard","medium","easy","TriviaGame","isDisable","questionIndex","showColoredBorders","sumScore","secs","diff","uptadePlayerScore","parse","timeLeft","updatePlayerAssertions","correctAnswer","difficulty","correct_answer","wrongAnswer","incorrect_answers","map","elem","index","key","category","question","renderBtnCorrectAnswer","renderBtnWrongAnswer","renderQuestions","urlAvatar","updateAssertions","Settings","FeedBack","ranking","push","picture","history","reset","replace","Ranking","arr","sort","b","y","INITIAL_STATE","results","listReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","useLocation","transitions","useTransition","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91abfcb9.chunk.js","sourcesContent":["export async function fetchToken() {\n  const response = await fetch('https://opentdb.com/api_token.php?command=request');\n  const token = await response.json();\n  return token;\n}\n\nexport async function fetchQuestions(numQuestions, token) {\n  const response = await fetch(`https://opentdb.com/api.php?amount=${numQuestions}&token=${token}`);\n  const questions = await response.json();\n  return questions;\n}\n","import { fetchToken, fetchQuestions } from '../services/API';\n\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_GRAVATAR = 'GET_GRAVATAR';\nexport const GET_PLAYER_INFO = 'GET_PLAYER_INFO';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const UPDATE_TIME = 'UPDATE_TIME';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const UPDATE_ASSERTIONS = 'UPDATE_ASSERTIONS';\nexport const UPDATE_GAMEOVER = 'UPDATE_GAMEOVER';\nexport const SAVE_AVATAR = 'SAVE_AVATAR';\nexport const RESET_STATE = 'RESET_STATE';\n\nconst NUM_OF_QUESTIONS = 5;\n\nexport const getToken = (payload) => ({\n  type: GET_TOKEN,\n  payload,\n});\n\nexport const getPlayerInfo = (payload) => ({\n  type: GET_PLAYER_INFO,\n  payload,\n});\n\nexport const getQuetions = (payload) => ({\n  type: GET_QUESTIONS,\n  payload,\n});\n\nexport const updateTime = (payload) => ({\n  type: UPDATE_TIME,\n  payload,\n});\n\nexport const updateScore = (payload) => ({\n  type: UPDATE_SCORE,\n  payload,\n});\n\nexport const updateAssertions = (payload) => ({\n  type: UPDATE_ASSERTIONS,\n  payload,\n});\n\nexport const saveAvatar = (payload) => ({\n  type: SAVE_AVATAR,\n  payload,\n});\n\nexport const resetState = () => ({\n  type: RESET_STATE,\n});\n\nexport const getTokenAPI = () => async (dispatch) => {\n  const response = await fetchToken();\n  localStorage.setItem('token', response.token);\n  dispatch(getToken(response));\n\n  const questions = await fetchQuestions(NUM_OF_QUESTIONS, response.token);\n  dispatch(getQuetions(questions));\n\n  const playerData = {\n    player: {\n      score: 0,\n      assertions: 0,\n    },\n  };\n  localStorage.setItem('state', JSON.stringify(playerData));\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { getPlayerInfo, getTokenAPI } from '../action';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      gravatarEmail: '',\n      btnEnable: true,\n      login: false,\n      errors: {},\n    };\n\n    this.verifyLogin = this.verifyLogin.bind(this);\n    this.nameInfo = this.nameInfo.bind(this);\n    this.emailInfo = this.emailInfo.bind(this);\n  }\n\n  componentWillUnmount() {\n    const { savePlayerInfo } = this.props;\n    const { name, gravatarEmail } = this.state;\n    savePlayerInfo({ name, gravatarEmail });\n\n    if (localStorage.getItem('ranking') === null) {\n      localStorage.setItem('ranking', JSON.stringify([]));\n    }\n\n    // const ranking = JSON.parse(localStorage.getItem('ranking'));\n    // const check = ranking.filter((player) => player.gravatarEmail !== gravatarEmail);\n    // localStorage.setItem('ranking', JSON.stringify(check));\n  }\n\n  verifyLogin() {\n    const { name, gravatarEmail } = this.state;\n    const errors = {};\n    if (name.length > 0 && gravatarEmail.length > 0) {\n      this.setState({ btnEnable: false });\n    }\n\n    if (!/(\\w+[0-9]*)+@\\w+\\.\\w+/.test(gravatarEmail) || name.length === 0) {\n      errors.errorEmail = 'Nome ou email incorreto';\n      this.setState({ btnEnable: true, errors });\n    }\n\n    return this.setState({ errors });\n  }\n\n  redirectToGame() {\n    this.setState({ login: true });\n  }\n\n  nameInfo() {\n    const { name } = this.state;\n    return (\n      <label htmlFor=\"name\">\n        Nome:\n        <input\n          data-testid=\"input-player-name\"\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          value={ name }\n          onChange={ ({ target }) => {\n            this.setState({ name: target.value }, this.verifyLogin);\n          } }\n        />\n      </label>\n    );\n  }\n\n  emailInfo() {\n    const { gravatarEmail, errors } = this.state;\n    return (\n      <label htmlFor=\"email\">\n        Email:\n        <input\n          data-testid=\"input-gravatar-email\"\n          id=\"email\"\n          name=\"email\"\n          type=\"text\"\n          value={ gravatarEmail }\n          onChange={ ({ target }) => {\n            this.setState({ gravatarEmail: target.value }, this.verifyLogin);\n          } }\n        />\n        {errors.errorEmail && <span>{errors.errorEmail}</span>}\n      </label>\n    );\n  }\n\n  render() {\n    const { btnEnable, login } = this.state;\n    const { getTokenData, isQuestions } = this.props;\n    if (login && isQuestions) {\n      return <Redirect to=\"/trivia\" />;\n    }\n    return (\n      <form>\n        { this.nameInfo() }\n        { this.emailInfo() }\n\n        <button\n          type=\"button\"\n          disabled={ btnEnable }\n          data-testid=\"btn-play\"\n          onClick={ () => {\n            getTokenData();\n            this.redirectToGame();\n          } }\n        >\n          Jogar\n        </button>\n\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getTokenData: () => dispatch(getTokenAPI()),\n  savePlayerInfo: (value) => dispatch(getPlayerInfo(value)),\n});\n\nconst mapStateToProps = (state) => ({\n  isQuestions: state.player.isQuestions,\n});\n\nLogin.propTypes = {\n  getTokenData: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport { FiSettings } from 'react-icons/fi';\nimport { Transition, animated, config } from 'react-spring';\nimport LoginForms from '../components/LoginForms';\nimport '../login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      redirectSettings: false,\n      showComp: false,\n    };\n  }\n\n  componentDidMount() {\n    this.showComp();\n  }\n\n  componentWillUnmount() {\n    this.showComp();\n  }\n\n  showComp() {\n    const { showComp } = this.state;\n    this.setState({ showComp: !showComp });\n  }\n\n  render() {\n    const { redirectSettings, showComp } = this.state;\n    if (redirectSettings) {\n      return <Redirect to=\"/settings\" />;\n    }\n    return (\n      <section className=\"login\">\n\n        <Transition\n          items={ showComp }\n          from={ { x: 500, opacity: 0 } }\n          enter={ { x: 0, opacity: 1 } }\n          leave={ { x: -500, opacity: 0 } }\n          delay={ 200 }\n          config={ config.molasses }\n        >\n          {(styles, item) => item\n          && (\n            <animated.div style={ styles }>\n              <section className=\"login-container\">\n                <LoginForms />\n                <button\n                  type=\"button\"\n                  data-testid=\"btn-settings\"\n                  className=\"settings-btn\"\n                  onClick={ () => this.setState({ redirectSettings: true }) }\n                >\n\n                  <FiSettings />\n                </button>\n              </section>\n            </animated.div>)}\n        </Transition>\n\n      </section>\n\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { saveAvatar } from '../action';\n\nclass Header extends Component {\n  render() {\n    const { name, gravatarEmail, score, avatar } = this.props;\n    const hash = md5(gravatarEmail).toString();\n    avatar(`https://www.gravatar.com/avatar/${hash}`);\n    return (\n      <header>\n        <section className=\"player-info\">\n          <img\n            src={ `https://www.gravatar.com/avatar/${hash}` }\n            alt=\"Avatar do jogador\"\n            data-testid=\"header-profile-picture\"\n          />\n          <p data-testid=\"header-player-name\">\n            Player:\n            {' '}\n            {name}\n          </p>\n        </section>\n        <section className=\"score-container\">\n          <p>\n            Score:\n          </p>\n          <p data-testid=\"header-score\">\n            {score}\n          </p>\n        </section>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  gravatarEmail: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nconst mapToDispatchProps = (dispatch) => ({\n  avatar: (url) => dispatch(saveAvatar(url)),\n});\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  gravatarEmail: PropTypes.string,\n  score: PropTypes.string,\n  avatar: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapToDispatchProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateTime } from '../action';\n\nconst ONE_SECONDS = 1000;\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      seconds: 30,\n    };\n    this.starTimer = this.starTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.starTimer();\n  }\n\n  starTimer() {\n    this.timerInterval = setInterval(() => {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds - 1,\n      }));\n    }, ONE_SECONDS);\n  }\n\n  stopTimer() {\n    clearInterval(this.timerInterval);\n    this.setState({ seconds: '0' });\n  }\n\n  render() {\n    const { disableButtons, updateSeconds, wasAnswered } = this.props;\n    const { seconds } = this.state;\n    if (seconds === 0 || wasAnswered) {\n      this.stopTimer();\n      disableButtons();\n    }\n\n    updateSeconds(seconds);\n\n    return (\n      <p className=\"timer\">\n        {seconds}\n      </p>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateSeconds: (value) => dispatch(updateTime(value)),\n});\n\nTimer.propTypes = {\n  disableButtons: PropTypes.boolean,\n  updateSeconds: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport { updateAssertions, updateScore } from '../action';\n\nimport '../trivia.css';\n\nconst FOUR = 4;\nconst TEN = 10;\nconst difficultyScore = {\n  hard: 3,\n  medium: 2,\n  easy: 1,\n};\n\nclass TriviaGame extends Component {\n  constructor() {\n    super();\n    this.state = {\n      wasAnswered: false,\n      isDisable: false,\n      questionIndex: 0,\n    };\n    this.showColoredBorders = this.showColoredBorders.bind(this);\n    this.disableButtons = this.disableButtons.bind(this);\n    this.sumScore = this.sumScore.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { assertions, score } = this.props;\n    const playerData = {\n      player: {\n        score,\n        assertions,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(playerData));\n  }\n\n  showColoredBorders() {\n    this.setState({ wasAnswered: true });\n  }\n\n  disableButtons() {\n    this.setState({ isDisable: true });\n  }\n\n  sumScore(secs, diff) {\n    const { uptadePlayerScore } = this.props;\n    const getStorage = JSON.parse(localStorage.getItem('state'));\n    const amountScore = getStorage.player.score;\n\n    const currScore = amountScore + TEN + (secs * difficultyScore[diff]);\n\n    uptadePlayerScore(currScore);\n  }\n\n  renderBtnCorrectAnswer() {\n    const { questions, timeLeft, updatePlayerAssertions } = this.props;\n    const { isDisable, wasAnswered, questionIndex } = this.state;\n    const correctAnswer = wasAnswered ? 'correct-answer' : 'btn-alternative';\n\n    return (\n      <button\n        type=\"button\"\n        className={ correctAnswer }\n        data-testid=\"correct-answer\"\n        disabled={ isDisable }\n        onClick={ () => {\n          this.showColoredBorders();\n          this.sumScore(timeLeft, questions[questionIndex].difficulty);\n          updatePlayerAssertions(1);\n        } }\n      >\n        {questions[questionIndex].correct_answer}\n      </button>);\n  }\n\n  renderBtnWrongAnswer() {\n    const { questions } = this.props;\n    const { isDisable, wasAnswered, questionIndex } = this.state;\n    const wrongAnswer = wasAnswered ? 'wrong-answer' : ' btn-alternative';\n\n    return questions[questionIndex].incorrect_answers.map((elem, index) => (\n      <button\n        type=\"button\"\n        className={ wrongAnswer }\n        key={ index }\n        disabled={ isDisable }\n        data-testid={ `wrong-answer-${index}` }\n        onClick={ () => this.showColoredBorders() }\n      >\n        {elem}\n      </button>\n    ));\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { wasAnswered, questionIndex } = this.state;\n    if (questionIndex > FOUR) {\n      return <Redirect to=\"/feedback\" />;\n    }\n    return (\n      <>\n        <Header />\n        <section className=\"main\">\n          <section className=\"question-container\">\n            <p data-testid=\"question-category\">\n              {questions[questionIndex].category}\n            </p>\n            <p data-testid=\"question-text\">\n              {questions[questionIndex].question}\n            </p>\n          </section>\n          <section className=\"alternatives\">\n            {this.renderBtnCorrectAnswer()}\n            {this.renderBtnWrongAnswer()}\n          </section>\n          {!wasAnswered && <Timer\n            disableButtons={ this.disableButtons }\n            wasAnswered={ wasAnswered }\n          />}\n          {wasAnswered && (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              className=\"btn-next\"\n              onClick={ () => this.setState((prevState) => ({\n                questionIndex: prevState.questionIndex + 1,\n                wasAnswered: false,\n              })) }\n            >\n              Próxima\n            </button>)}\n        </section>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  questions: state.player.questions,\n  renderQuestions: state.player.renderQuestions,\n  timeLeft: state.player.timeLeft,\n  assertions: state.player.assertions,\n  score: state.player.score,\n  name: state.player.name,\n  urlAvatar: state.player.urlAvatar,\n  gravatarEmail: state.player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  uptadePlayerScore: (value) => dispatch(updateScore(value)),\n  updatePlayerAssertions: (payload) => dispatch(updateAssertions(payload)),\n});\n\nTriviaGame.propTypes = {\n  getAssertions: PropTypes.func,\n  uptadePlayerScore: PropTypes.func,\n  assertions: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TriviaGame);\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <section>\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n      </section>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport { resetState } from '../action';\n\nimport '../feedback.css';\n\nclass FeedBack extends Component {\n  componentDidMount() {\n    const { score, name, urlAvatar, gravatarEmail } = this.props;\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    ranking.push({\n      name,\n      score,\n      picture: urlAvatar,\n      gravatarEmail,\n    });\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  render() {\n    const { score, assertions, history, reset } = this.props;\n\n    const THREE = 3;\n    return (\n      <>\n        <Header />\n        <section className=\"feedback-container\">\n          <section className=\"feedback-message\">\n            {\n              assertions >= THREE\n                ? <span data-testid=\"feedback-text\">Mandou bem!</span>\n                : <span data-testid=\"feedback-text\">Podia ser melhor...</span>\n            }\n            <span data-testid=\"feedback-total-question\">\n              {/* {`Você acertou ${} questões!`} */}\n              {assertions}\n            </span>\n            <span data-testid=\"feedback-total-score\">\n              {/* {`Um total de ${score} pontos`} */}\n              {score}\n            </span>\n          </section>\n          <section className=\"fb-btn-container\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n              onClick={ () => history.replace('/ranking') }\n            >\n              Ver Ranking\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ () => {\n                history.replace('/');\n                reset();\n              } }\n            >\n              Jogar novamente\n            </button>\n          </section>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n  name: state.player.name,\n  urlAvatar: state.player.urlAvatar,\n  gravatarEmail: state.player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(resetState()),\n});\n\nFeedBack.propTypes = {\n  score: PropTypes.number,\n  assertions: PropTypes.arrayOf(PropTypes.shape),\n  history: PropTypes.shape,\n  reset: PropTypes.func,\n  name: PropTypes.string,\n  urlAvatar: PropTypes.string,\n  gravatarEmail: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FeedBack);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Transition, animated, config } from 'react-spring';\nimport { resetState } from '../action';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showComp: false,\n    };\n  }\n\n  componentDidMount() {\n    this.showComp();\n  }\n\n  componentWillUnmount() {\n    this.showComp();\n  }\n\n  showComp() {\n    const { showComp } = this.state;\n    this.setState({ showComp: !showComp });\n  }\n\n  render() {\n    const { showComp } = this.state;\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const arr = ranking.sort((a, b) => b.score - a.score);\n    const { history, reset } = this.props;\n    return (\n      <section>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n\n        <Transition\n          items={ showComp }\n          from={ { y: 800, opacity: 0 } }\n          enter={ { y: 0, opacity: 1 } }\n          leave={ { y: -800, opacity: 0 } }\n          delay={ 200 }\n          config={ config.molasses }\n        >\n          {(styles, item) => item\n            && (\n              <animated.div style={ styles }>\n                {\n                  arr.map((player, index) => (\n                    <section key={ index }>\n                      <img src={ player.picture } alt=\"avatar\" />\n                      <span data-testid={ `player-name-${index}` }>{player.name}</span>\n                      <span data-testid={ `player-score-${index}` }>{player.score}</span>\n                    </section>\n                  ))\n                }\n              </animated.div>\n            )}\n        </Transition>\n\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => {\n            history.replace('/');\n            reset();\n          } }\n        >\n          Ir para Home\n        </button>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(resetState()),\n});\n\nRanking.propTypes = {\n  history: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n","import {\n  GET_PLAYER_INFO,\n  GET_QUESTIONS,\n  GET_TOKEN,\n  UPDATE_SCORE,\n  UPDATE_TIME,\n  UPDATE_ASSERTIONS,\n  SAVE_AVATAR,\n} from '../action';\n\nconst INITIAL_STATE = {\n  name: '',\n  gravatarEmail: '',\n  token: '',\n  score: 0,\n  questions: [],\n  assertions: 0,\n  isQuestions: false,\n  timeLeft: 0,\n  urlAvatar: '',\n};\n\nfunction player(state = INITIAL_STATE, { type, payload }) {\n  switch (type) {\n  case GET_TOKEN:\n    return { ...state, token: payload.token };\n  case GET_PLAYER_INFO:\n    return { ...state, name: payload.name, gravatarEmail: payload.gravatarEmail };\n  case GET_QUESTIONS:\n    return { ...state, questions: payload.results, isQuestions: true };\n  case UPDATE_TIME:\n    return { ...state, timeLeft: payload };\n  case UPDATE_SCORE:\n    return { ...state, score: payload };\n  case UPDATE_ASSERTIONS:\n    return { ...state, assertions: state.assertions + payload };\n  case SAVE_AVATAR:\n    return { ...state, urlAvatar: payload };\n  default:\n    return INITIAL_STATE;\n  }\n}\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst listReducer = combineReducers({ player });\n\nexport default listReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport listReducer from '../reducers';\n\nconst store = createStore(\n  listReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport { useTransition, animated } from 'react-spring';\nimport {\n  TriviaGame,\n  Settings,\n  Login,\n  FeedBack,\n  Ranking,\n} from './pages';\nimport './App.css';\n\nexport default function App() {\n  const location = useLocation();\n  const transitions = useTransition(location, {\n\n    from: { x: 800, opacity: 0 },\n    enter: { x: 0, opacity: 1 },\n    leave: { x: -800, opacity: 0 },\n\n  });\n\n  return (\n    <>\n      {transitions((props, item) => (\n        <animated.div style={ props }>\n          <Switch location={ item }>\n            <Route exact path=\"/\" component={ Login } />\n            <Route path=\"/trivia\" component={ TriviaGame } />\n            <Route path=\"/settings\" component={ Settings } />\n            <Route path=\"/feedback\" component={ FeedBack } />\n            <Route path=\"/ranking\" component={ Ranking } />\n          </Switch>\n        </animated.div>\n      ))}\n\n    </>\n  );\n}\n"],"sourceRoot":""}